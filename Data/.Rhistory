ptstar <- ""
}
return(ptstar)
}
# estimate the models
# no controls
mod1 <- feols(log_gini ~ treat | statefip + wrkyr, cluster = "statefip", data = data)
# controls
mod2 <- feols(log_gini ~ treat + gsp_pc_growth + prop_blacks + prop_dropouts + prop_female_headed +
unemploymentrate | statefip + wrkyr, cluster = "statefip", data = data)
bacon_out <- bacon(log_gini ~ treat,
data = data,
id_var = "state",
time_var = "wrkyr")
View(bacon_out)
# Table 4 - Bacon Decomposition -----------------------------------------------------
# calculate the bacon decomposition without covariates
bacon_out <- bacon(log_gini ~ treat,
data = data,
id_var = "state",
time_var = "wrkyr") %>%
# rename Later vs. Always Treated to Later v. Earlier Treated
# because the code changed and it is accurate
mutate(type = if_else(type == "Later vs Always Treated",
"Later vs Earlier Treated",
type))
# first get the total weight for each group.
total_weights <- bacon_out %>%
group_by(type) %>%
summarize(weight = sum(weight))
View(total_weights)
# get the weighted average within group
group_avg <- bacon_out %>%
group_by(type) %>%
summarize(avg = weighted.mean(estimate, weight),
weights = sum(weight))
# make the table
BLL_decomp <- group_avg %>%
kable("latex", digits = 3, align = 'lcc',
booktabs = T,
col.names = c("Type", "Weighted \n Average", "Total \n Weight"),
label = "BLL_decomp") %>%
kable_styling(position = "center", font_size = 8,
latex_options = c("HOLD_position", "scale_down"))
# Figure 5 - Bacon Decomp -------------------------------------------------
# first early v late plot
EvL <- bacon_out %>%
filter(type == "Earlier vs Later Treated") %>%
ggplot(aes(x = weight, y = estimate)) +
geom_point(size = 3, alpha = 1/2) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_hline(yintercept = group_avg$avg[1], color = "darkred", size = 2) +
labs(x = "", y = expression(widehat(delta^'DD'))) +
ggtitle(paste0("Early vs Later Treated \n Total Weight =", scales::percent(total_weights$weight[1]))) +
scale_y_continuous(limits = c(-.12, 0.12)) +
theme(plot.title = element_text(hjust = 0.5),
legend.position = "bottom",
legend.title = element_blank(),
axis.title.y = element_text(angle = 360, hjust = 0.5, vjust = 0.5))
# late v early plot
LvE <- bacon_out %>%
filter(type == "Later vs Earlier Treated") %>%
ggplot(aes(x = weight, y = estimate)) +
geom_point(size = 3, alpha = 1/2) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_hline(yintercept = group_avg$avg[2], color = "darkred", size = 2) +
labs(x = "Weight", y = expression(widehat(delta^'DD'))) +
scale_y_continuous(limits = c(-.12, 0.12)) +
ggtitle(paste0("Later vs Earlier Treated \n Total Weight = ", scales::percent(total_weights$weight[2]))) +
theme(plot.title = element_text(hjust = 0.5),
legend.position = "bottom",
legend.title = element_blank(),
axis.title.y = element_text(angle = 360, hjust = 0.5, vjust = 0.5))
bacon_out %>%
filter(type == "Later vs Earlier Treated") %>%
ggplot(aes(x = weight, y = estimate)) +
geom_point(size = 3, alpha = 1/2) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_hline(yintercept = group_avg$avg[2], color = "darkred", size = 2) +
labs(x = "Weight", y = expression(widehat(delta^'DD'))) +
scale_y_continuous(limits = c(-.12, 0.12)) +
ggtitle(paste0("Later vs Earlier Treated \n Total Weight = ", scales::percent(total_weights$weight[2]))) +
theme(plot.title = element_text(hjust = 0.5),
legend.position = "bottom",
legend.title = element_blank(),
axis.title.y = element_text(angle = 360, hjust = 0.5, vjust = 0.5))
data %>%
select(state, wrkyr, branch_reform) %>%
mutate(state = fct_reorder(state, rank(desc(state)))) %>%
mutate(post = if_else(wrkyr < branch_reform, "Pre", "Post")) %>%
mutate(post = factor(post, levels = c("Pre", "Post"))) %>%
ggplot(aes(x = wrkyr, y = state)) +
geom_tile(aes(fill = as.factor(post)), alpha = 3/4) +
scale_fill_manual(values = c("#4B5F6C", "#A7473A")) +
theme(legend.position = 'bottom',
legend.title = element_blank(),
panel.grid.minor = element_blank(),
axis.title = element_blank(),
legend.background = element_rect(color = "white"))
data_dummies <- data %>%
dummy_cols(select_columns = "rel_year", remove_selected_columns = FALSE,
ignore_na = TRUE)
View(data_dummies)
data_dummies <- data %>%
dummy_cols(select_columns = "rel_year", remove_selected_columns = FALSE,
ignore_na = TRUE) %>%
mutate(across(starts_with("rel_year_"), ~replace_na(., 0))) %>%
# bin end points
mutate(`rel_year_-10` = if_else(rel_year <= -10, 1, 0),
rel_year_15 = if_else(rel_year >= 15, 1, 0))
# make the formula to estimate
indicators <- c(paste0("`", "rel_year_", c(-10:-1, 1:15), "`"))
indicators
# estimate model as published
es_published <- feols(log_gini ~ .[indicators] | wrkyr + statefip,
data = data_dummies, cluster = "statefip")
broom::tidy(es_published, conf.int = TRUE) %>%
# add in the relative time variable
mutate(t = c(-10:-1, 1:15)) %>%
# subtract out the the mean for beta -10 to -1
mutate(conf.low = conf.low - mean(estimate[t < 0]),
conf.high = conf.high - mean(estimate[t < 0]),
estimate = estimate - mean(estimate[t < 0])) %>%
select(t, estimate, conf.low, conf.high) %>%
bind_rows(tibble(t = 0, estimate = 0, conf.low = 0, conf.high = 0)) %>%
# make two different periods for the connection
mutate(group = as.factor(case_when(
t < 0 ~ 1,
t >= 0 ~ 2
))) %>%
# plot
ggplot(aes(x = t, y = estimate)) +
geom_point(fill = "white", shape = 21) + geom_line() +
ggtitle("(A)") +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high),
linetype = "longdash", show.legend = FALSE) +
geom_hline(yintercept = 0,  linetype = "longdash", color = "gray") +
geom_vline(xintercept = -0.5,  linetype = "longdash", color = "gray") +
labs(y = "Percent \n Change", x = "Years Relative to Deregulation") +
scale_x_continuous(breaks = seq(-10, 15, by = 5)) +
scale_y_continuous(breaks = seq(-0.06, 0.04, by = 0.02),
label = scales::percent_format(accuracy = 1)) +
theme(axis.title.y = element_text(hjust = 0.5, vjust = 0.5, angle = 360),
plot.title = element_text(hjust = 0.5))
broom::tidy(es_published, conf.int = TRUE) %>%
# add in the relative time variable
mutate(t = c(-10:-1, 1:15)) %>%
select(t, estimate, conf.low, conf.high) %>%
bind_rows(tibble(t = 0, estimate = 0, conf.low = 0, conf.high = 0)) %>%
# make two different periods for the connection
mutate(group = as.factor(case_when(
t < 0 ~ 1,
t >= 0 ~ 2
))) %>%
# plot
ggplot(aes(x = t, y = estimate)) +
geom_point(fill = "white", shape = 21) + geom_line() +
ggtitle("(B)") +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high),
linetype = "longdash", show.legend = FALSE) +
geom_hline(yintercept = 0,  linetype = "longdash", color = "gray") +
geom_vline(xintercept = -0.5,  linetype = "longdash", color = "gray") +
labs(y = "Percent \n Change", x = "Years Relative to Deregulation") +
scale_x_continuous(breaks = seq(-10, 15, by = 5)) +
scale_y_continuous(breaks = seq(-0.06, 0.04, by = 0.02),
label = scales::percent_format(accuracy = 1)) +
theme(axis.title.y = element_text(hjust = 0.5, vjust = 0.5, angle = 360),
plot.title = element_text(hjust = 0.5))
# Remedies ----------------------------------------------------------------
# get treated years that we can estimate
treats <- data %>%
filter(branch_reform >= 1977 & branch_reform < max(branch_reform)) %>%
pull(branch_reform) %>%
unique() %>%
sort()
treats
test <- data %>%
# drop all observations on or after 1999 when everyone is treated
filter(wrkyr < 1999) %>%
# keep firms in the adopt year or those firms in years t + 10
filter(branch_reform == 1977 | branch_reform > 1977 + 10) %>%
# keep just years t - 5 to t + 10
filter(wrkyr %>% between(1977 - 5, 1977 + 10)) %>%
# replace adopt year to NA if not in treated year to make dummies
mutate(branch_reform = if_else(branch_reform == 1977, branch_reform, NA_real_),
rel_year = wrkyr - branch_reform) %>%
select(statefip, wrkyr, branch_reform, rel_year, log_gini) %>%
mutate(dt = as.character(1977))
View(test)
# function to get treat-year specific cohorts
make_dt <- function(tyr) {
data %>%
# drop all observations on or after 1999 when everyone is treated
filter(wrkyr < 1999) %>%
# keep firms in the adopt year or those firms in years t + 10
filter(branch_reform == tyr | branch_reform > tyr + 10) %>%
# keep just years t - 5 to t + 10
filter(wrkyr %>% between(tyr - 5, tyr + 10)) %>%
# replace adopt year to NA if not in treated year to make dummies
mutate(branch_reform = if_else(branch_reform == tyr, branch_reform, NA_real_),
rel_year = wrkyr - branch_reform) %>%
select(statefip, wrkyr, branch_reform, rel_year, log_gini) %>%
mutate(dt = as.character(tyr))
}
# stack the datasets
stacked_data <- map_dfr(treats, make_dt) %>%
dummy_cols(select_columns = "rel_year", remove_selected_columns = FALSE,
ignore_na = TRUE) %>%
mutate(across(starts_with("rel_year_"), ~replace_na(., 0))) %>%
# interact cluster with statefip
mutate(cluster = paste0(statefip, "_", dt))
View(stacked_data)
# estimate the model and plot
# estimate the model
stack1 <- feols(log_gini ~ .[indicators] | wrkyr^dt + statefip^dt,
cluster = "cluster", data = stacked_data)
# make formula
indicators <- c(paste0("`", "rel_year_", c(-5:-1, 1:10), "`"))
# estimate the model and plot
# estimate the model
stack1 <- feols(log_gini ~ .[indicators] | wrkyr^dt + statefip^dt,
cluster = "cluster", data = stacked_data)
broom::tidy(stack1, conf.int = TRUE) %>%
# add in the relative time variable
mutate(t = c(-5:-1, 1:10)) %>%
select(t, estimate, conf.low, conf.high) %>%
bind_rows(tibble(t = 0, estimate = 0, conf.low = 0, conf.high = 0)) %>%
# plot
ggplot(aes(x = t, y = estimate)) +
geom_point(fill = "white", shape = 21) + geom_line() +
ggtitle("(A)") +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high),
linetype = "longdash", show.legend = FALSE) +
geom_hline(yintercept = 0,  linetype = "longdash", color = "gray") +
geom_vline(xintercept = -0.5,  linetype = "longdash", color = "gray") +
labs(y = "Percent \n Change", x = "Years Relative to Deregulation") +
scale_x_continuous(breaks = seq(-10, 15, by = 5)) +
scale_y_continuous(breaks = seq(-0.06, 0.06, by = 0.02),
label = scales::percent_format(accuracy = 1)) +
theme(axis.title.y = element_text(hjust = 0.5, vjust = 0.5, angle = 360),
plot.title = element_text(hjust = 0.5))
# remake but allowing for more observations to enter
# get treated years that we can estimate
treats <- data %>%
filter(branch_reform >= 1977 & branch_reform < max(branch_reform)) %>%
pull(branch_reform) %>%
unique() %>%
sort()
# function to get treat-year specific cohorts
make_dt <- function(tyr) {
data %>%
# keep firms in the adopt year or those obs without treatment before t + 10
filter(branch_reform == tyr | (branch_reform > tyr & wrkyr < branch_reform)) %>%
# keep just years t - 5 to t + 10
filter(wrkyr %>% between(tyr - 5, tyr + 10)) %>%
# replace adopt year to NA to make dummies
mutate(branch_reform = if_else(branch_reform == tyr, branch_reform, NA_real_),
rel_year = wrkyr - branch_reform,
treat = if_else(is.na(branch_reform) | wrkyr < tyr, 0, 1)) %>%
select(statefip, wrkyr, branch_reform, rel_year, log_gini, treat) %>%
mutate(dt = as.character(tyr))
}
# stack the datasets
stacked_data <- map_dfr(treats, make_dt) %>%
dummy_cols(select_columns = "rel_year", remove_selected_columns = FALSE,
ignore_na = TRUE) %>%
mutate(across(starts_with("rel_year_"), ~replace_na(., 0))) %>%
mutate(cluster = paste0(statefip, "_", dt))
# make formula
indicators <- c(paste0("`", "rel_year_", c(-5:-1, 1:10), "`"))
# estimate the model and plot
# estimate the model
stack2 <- feols(log_gini ~ .[indicators] | wrkyr^dt + statefip^dt,
cluster = "cluster", data = stacked_data)
broom::tidy(stack2, conf.int = TRUE) %>%
# add in the relative time variable
mutate(t = c(-5:-1, 1:10)) %>%
select(t, estimate, conf.low, conf.high) %>%
bind_rows(tibble(t = 0, estimate = 0, conf.low = 0, conf.high = 0)) %>%
# plot
ggplot(aes(x = t, y = estimate)) +
geom_point(fill = "white", shape = 21) + geom_line() +
ggtitle("(B)") +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high),
linetype = "longdash", show.legend = FALSE) +
geom_hline(yintercept = 0,  linetype = "longdash", color = "gray") +
geom_vline(xintercept = -0.5,  linetype = "longdash", color = "gray") +
labs(y = "Percent \n Change", x = "Years Relative to Deregulation") +
scale_x_continuous(breaks = seq(-10, 15, by = 5)) +
scale_y_continuous(breaks = seq(-0.06, 0.06, by = 0.02),
label = scales::percent_format(accuracy = 1)) +
theme(axis.title.y = element_text(hjust = 0.5, vjust = 0.5, angle = 360),
plot.title = element_text(hjust = 0.5))
# CS Method ---------------------------------------------------------------
# never treateds only as control states
# make the dataaset - drop states treated before 1977
data_cs <- data %>%
# drop states treated before data
filter(branch_reform >= 1977) %>%
# keep only observations through 1998
filter(wrkyr <= 1998) %>%
# set branch reform = 0 for last treated state
mutate(branch_reform = if_else(branch_reform == 1999, 0, branch_reform)) %>%
select(log_gini, wrkyr, statefip, branch_reform)
# run
out1 <- att_gt(yname = "log_gini",
data = data_cs,
tname = "wrkyr",
idname = "statefip",
gname = "branch_reform",
xformla = NULL,
control_group = "nevertreated",
est_method = "reg",
print_details = FALSE,
bstrap = T,
cband = T,
clustervars = "statefip")
# run
out1 <- att_gt(yname = "log_gini",
data = data_cs,
tname = "wrkyr",
idname = "statefip",
gname = "branch_reform",
xformla = NULL,
control_group = "notyettreated",
est_method = "reg",
print_details = FALSE,
bstrap = T,
cband = T,
clustervars = "statefip")
## estimate with `notyettreated'
# make the dataset - drop states treated before 1977
data_cs <- data %>%
# drop states treated before data
filter(branch_reform >= 1977) %>%
# keep only observations through 1998
filter(wrkyr <= 1998) %>%
select(statefip, wrkyr, branch_reform, log_gini)
# run
out2 <- att_gt(yname = "log_gini",
data = data_cs,
tname = "wrkyr",
idname = "statefip",
gname = "branch_reform",
xformla = NULL,
control_group = "notyettreated",
est_method = "reg",
print_details = FALSE,
bstrap = T,
cband = T,
clustervars = "statefip")
# make the dynamic event study
es2 <- aggte(out2, type="dynamic", min_e = -5, max_e = 10)
tidy(es2) %>%
as_tibble() %>%
# plot
ggplot(aes(x = event.time, y = estimate)) +
geom_point(fill = "white", shape = 21) + geom_line() +
ggtitle("(B)") +
geom_errorbar(aes(ymin = point.conf.low, ymax = point.conf.high),
linetype = "longdash", show.legend = FALSE) +
geom_hline(yintercept = 0,  linetype = "longdash", color = "gray") +
geom_vline(xintercept = -0.5,  linetype = "longdash", color = "gray") +
labs(y = "Percent \n Change", x = "Years Relative to Deregulation") +
scale_x_continuous(breaks = seq(-10, 15, by = 5)) +
scale_y_continuous(breaks = seq(-0.06, 0.06, by = 0.02),
label = scales::percent_format(accuracy = 1)) +
theme(axis.title.y = element_text(hjust = 0.5, vjust = 0.5, angle = 360),
plot.title = element_text(hjust = 0.5))
0.5*sqrt
0.5*sqrt(850)+0.5*sqrt(200)
0.5*sqrt(480)+0.5*sqrt(480)
0.5*sqrt(1000)+0.5*sqrt(0)
0.5*(480^2)+0.5*(480^2)
0.5*(850^2)+0.5*(200^2)
0.5*(1000^2)+0.5*(0)
0.5*850+0.5*200
sqrt(480)
480^2
525^2
500^2
if (!requireNamespace("xaringan"))
remotes::install_github("yihui/xaringan")
xaringan::infinite_moon_reader()
rm(list = ls())
xaringan::infinite_moon_reader()
xaringan::infinite_moon_reader()
full_data <- read.csv("~/Documents/paper projects/Indiana Toll Road Sell/models and results/Local_Data_DDD.csv")
full_data <- read.csv("~/models and results/Local_Data_DDD.csv")
full_data <- read.csv("Local_Data_DDD.csv")
library(tidyverse)
library(fixest)
full_data <- read.csv("Local_Data_DDD.csv")
full_data$treat <- ifelse(full_data$State == "IN", 1, 0)
full_data$post <- ifelse(full_data$Year4 >= 2007, 1, 0)
full_data$treat_year <- ifelse(full_data$State == "IN", 2007, NA)
full_data$time_to_treat <- ifelse(full_data$treat == 1,
full_data$Year4 - full_data$treat_year,
0)
full_data <- full_data %>%
mutate(real_Regular_Hwy_Maintain = real_Regular_Hwy_Cap_Outlay - real_Regular_Hwy_Construct)
controls <- c(17,26,27,39,42,55)
control_comb <- gdata::cbindX(combn(controls, 1),
combn(controls, 2),
combn(controls, 3),
combn(controls, 4),
combn(controls, 5),
combn(controls, 6))
mod_highway_direct <- list()
for (i in 1:ncol(control_comb)) {
mod_X <- feols(real_Regular_Hwy_Direct_Exp ~ i(time_to_treat, treat, ref = -1) +
demo_share + Population + real_income + age65.pct + white.pct +
real_Total_Debt_Outstanding + real_State_IGR_Highways +
real_Fed_IGR_Highways + real_General_Debt_Interest +
HPI.with.2000.base|
FIPS_Combined + Year4,
cluster = ~FIPS_Code_State,
data = full_data[full_data$FIPS_Code_State %in% c(18, control_comb[,i]),])
if(all(pvalue(mod_X)[1:6]>0.2)){
mod_highway_direct[[length(mod_highway_direct) + 1]] <- mod_X
}
}
iplot(mod_highway_direct[[3]],
xlab = 'Time to treatment',
main = 'Highway Expenditure')
iplot(mod_highway_direct[[4]],
xlab = 'Time to treatment',
main = 'Highway Expenditure')
iplot(mod_highway_direct[[5]],
xlab = 'Time to treatment',
main = 'Highway Expenditure')
iplot(mod_highway_direct[[1]],
xlab = 'Time to treatment',
main = 'Highway Expenditure')
iplot(mod_highway_direct[[2]],
xlab = 'Time to treatment',
main = 'Highway Expenditure')
iplot(mod_highway_direct[[3]],
xlab = 'Time to treatment',
main = 'Highway Expenditure')
xaringan::infinite_moon_reader()
library(readr)
IndFin00a <- read_csv("Documents/paper projects/Indiana Toll Road Sell/IndFin_1967-2012_for local gov use/IndFin00a.Txt")
View(IndFin00a)
if (!require("devtools")) install.packages("devtools")
devtools::install_github("hollina/scul")
devtools::install_github("hollina/scul")`
`
install.packages("devtools")
install.packages("textshaping")
install.packages("ragg")
install.packages("textshaping")
install.packages("devtools")
devtools::install_github("hollina/scul")
library(scul)
install.packages("DIDmultiplegt")
library(scul)
dim(cigarette_sales)
head(cigarette_sales[,1:6])
library(tidyverse)
install.packages("geojsonio")
install.packages("jqr")
install.packages("geojsonio", dependencies = TRUE)
install.packages("jqr")
install.packages("geojsonio")
install.packages("protolite")
install.packages("geojsonio")
library( dplyr )
library( Lahman )
data( Teams )
ave.so <- Teams$SO / Teams$G  # average strike-outs per game each season
year <- Teams$yearID
Teams$ave.so <- Teams$SO / Teams$G  # add back to data frame so you can subset
# min and max values needed to create your plot window
ave.so.min <- min( ave.so, na.rm=T )
ave.so.max <- max( ave.so, na.rm=T )
# the league average for each season
league.ave <- tapply( X=ave.so, INDEX=as.factor(year), FUN="mean", na.rm=T )
league.year <- as.numeric( names( league.ave ) )
1100/(1+1100*(0.05^2))
setwd("~/Documents/paper projects/school district revenue volatility/school_district_fiscal_autonomy/Data")
library(educationdata)
data <- get_education_data(level = "school-districts",
source = "ccd",
topic = "directory",
filters = list(year = 2013))
View(data)
View(data)
names(data)
rm(data)
directory <- get_education_data(level = "school-districts",
source = "ccd",
topic = "directory",
filters = list(year = c(1993-2021)))
directory <- get_education_data(level = "school-districts",
source = "ccd",
topic = "directory",
filters = list(year = c(1993:2021)))
View(directory)
finance <- get_education_data(level = "school-districts",
source = "ccd",
topic = "finance",
filters = list(year = c(1993:2021)))
finance <- get_education_data(level = "school-districts",
source = "ccd",
topic = "finance",
filters = list(year = c(1994:2018)))
write.csv(directory, file = "districts_directory.csv", row.names = FALSE)
finance <- get_education_data(level = "school-districts",
source = "ccd",
topic = "finance",
filters = list(year = c(1994:2018)))
